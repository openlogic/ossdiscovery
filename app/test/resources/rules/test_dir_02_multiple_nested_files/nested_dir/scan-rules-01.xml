<!-- this is a prototype scan rules file which covers the first story's projects:
		Apache, PHP, and JUnit
		
		(and hopefully covers 99% of those thereafter)
		
		Its purpose is to force us to think through the type of information and interactions confidence=
		with rules, rules engine, and walker that are needed.
		
		It flushes out various behavior and definitions for the rules engine and how they are defined.
		
		This file is heavily annotated for definition and discussion purposes at the beginning of the file,
		but thins out at the end in order to see how compact a project's match-rules can be.  A normal scan
		file would not be nearly this verbose and a lot more compact.
		
		Basic description:
			Each top-level project, defined by its package name and platform support, has a set of rules which
			each attempt to match something about the project in varying levels of analysis.  There can be two
			top-level project entries for the same project if the platform support is different (think C content
			on Windows which has different filenames than C content on all the *nix platforms which typically 
			name their files the same)
			
			Each project may have one or more "rule sets".
			
			A "rule set" is a set of "match rules" which define how and what to try to match.
			
			Each project's rule sets can be combined using logical expressions using AND, OR, and precedence
			operators (), so the rule author can describe how the rules should be evaluated.  The outcome
			of evaluating the match-rules provides a confidence level that the rule was satisfied (the package 
			or package-version exists.)  That confidence level is set by the match-rules author.
			
			There are 3 major match rule types:
			 	1) filename matches (filename-match)
				2) binary content matches (binary-match)
				3) md5 checksum matches (md5-match)
				
			In order to support different levels of effort to match (distillery model), each combination of 
			rules is given a relative speed value.  So, the rule engine can choose the appropriate rules to use based
			on the user's speed hint.  A quick example is that if you want a fast scan that provides a
			good confidence level that a package is installed, you'd use a filename-match.  
			
			To provide extra information like what package version is installed, you'd need a filename-match and 
			binary-match which can extract or deduce the version information from the binary.  The latter would
			take more time because it has to read the file and perform a search on it to find a pattern that
			the author prescribes is indicative of a version.  Because of that, it has a slower speed but adds
			precision to the scan results.
			
			The top-level CLI provides ways for the user to set the level of effort the scanner should use to 
			identify packages.  Those levels can be:
				1) Fast - package name only - Awareness
				2) Medium - package-version - Awareness
				3) Slow - package-version + full BP analysis - Inventory-level
				
			For Disco 2's initial stories, we'll only concern ourselves with 1 & 2.  Typically a 1 involves
			only a filename-match rule type.  Typically 2 involves a combination of filename-match and either
			a binary content search or md5 check. 
			
		Basic Scan Rules file format:
			<project-rules>
				<project-rule name="" os="">
					<eval expression="" speed="" confidence="" />
					<match-rules name="">
						<match-rule name="" type="" filename="" />
						<match-rule name="" type="" filename="" />
					</match-rules>
					<match-rules name="">
						<match-rule name="" type="" filename="" />
						<match-rule name="" type="" filename="" />
					</match-rules>
				</project-rule>
			 ... all top-level projects that can be detected follow with their project match-ruless
			</project-rules>
		
		os="" values can be one or more of "windows,linux,sunos-5.8,sunos-5.9,sunos-5.10" or "all" which 
		will automatically mean, all currently supported platforms.  So, Java projects rule sets, for example,
		won't need to be modified when we begin to support AIX, HP/UX or Mac OS X...they would automatically
		be supported when we added a new platform because java is java.
		
		rule name="" is given an arbitrary one word value that must be unique within the project. 
		
		match-rule name="" is an arbitrary one word name that's unique within a match-rules
		match-rule type="" can be one of "filename, binary, md5" which describe which type of match rule to 
		use:
			filename - simply matches the filename given by the walker with a given filename - it's an
			existence test, result is boolean
			binary - matches a search expression to binary content within a given filename. result is boolean
				true if any match occurred, false if no match occurred.  If a match occurred this rule will
				contain the results of the match (typically a version string)
			md5 - tests the md5 checksum of the given filename against a fixed md5 sum.  result is boolean
		
		each <match-rule> tag contains a filename attribute.  The list of all the match-rule filename attributes
		is the list that can be handed to the walker upon startup.  This way the walker can derive all the 
		filenames it will need to use as a generic filename filter.  match-rule filenames can be regular 
		expressions in order to match filenames based on something other than a literal name.
		
		[actual regexp's in this example are just placeholders for what would be a real perl regexp - they
		haven't been vetted/used to see if they are correct, valid regex's]
-->

<project-rules>
	
	<project-rule name="apache" from="wild" os="linux,sunos-5.10,sunos-5.9,sunos-5.8,macosx">
		
		<!-- eval tag tells the rule engine how to combine the different match-ruless within the project
		     to gain the highest accuracy or to produce the results at a given speed level.
		
			the eval tag also tells the rules engine which of the rule sets to run for this project.
			that way you can define rules for fast scans or precise scans and only the applicable
			rules are applied.
		
		 	the eval below tells the rule engine how to combine the rules to arrive at a match
		
			the speed attribute is the relative speed of the match - the lower the number the faster the
			match type.  this is used by the scan framework to give the user to ability to do a fast, less 
			granular scan vs a slower, very precise scan.
			
			each match rule returns a boolean result and typically has a side-effect result such as
			identifying and storing a package-version string.  this implies that rule types may have
			additional behavior such as maintaining a list of versions that it matched, locations 
			of the files that matched, etc.
			
			The value is % confidence that if the expression evaluates to true, that is the confidence
			level the package is installed.
			
			There's one eval rule per speed factor - never have more than 1 eval rule for the same speed factor.
			
			If only one eval rule is defined, only speeds of that eval's speed or slower will cause that
			rule to be applied
		-->

		<eval expression="executables" speed="1" confidence="100"/>  <!-- result is a boolean -->
		<!-- result is a boolean, side-effect leaves a package-version string -->
		<eval expression="versionstring" speed="2" confidence="100" />    
		
		<!-- we would not use the following for C content like apache, but there's no reason you could not 
		use it for Java content, for example.  The point of this is that the person developing the project
		rules can decide how to combine them
		
		<eval expression="(filename-match AND binary-match) OR md5-match" speed="3" />
		
		-->
		
		<match-rules name="executables">
			<!-- the result tag defines how the results of the individual match rules are combined
			     in order to produce a boolean result for the overall rule
			-->
			<result expression="(httpd OR httpsd)"/>
			<!-- you can use expressions in the result tag like this:
				<result "httpd OR (apxs AND htpasswd)" />
				so, if you found httpd or you found apxs and htpasswd, then return true 
			-->
			<match-rule name="httpd" type="filename" filename="^httpd$" />   <!-- result is boolean -->
			<match-rule name="httpsd" type="filename" filename="^httpsd$" />   <!-- result is boolean -->

			<!-- consider regex's for a versioned .so file match if appropriate for the project
			<match-rule name="file" filename="libaprutil-1.so.([0-9].[0-9].[0-9])" />
			-->
		</match-rules>
		
		<!-- use this match-rules to attempt to find a version match -->
		
		<match-rules name="versionstring">
			<result expression="httpd OR httpsd OR httpsd_prefork OR httpsd_worker" />
			<match-rule name="httpd" type="binary" filename="^httpd$" regexp="Apache/([0-9].[0-9]+.[0-9]+)" />  
			<match-rule name="httpsd" type="binary" filename="^httpsd$" regexp="Apache/([0-9].[0-9]+.[0-9]+)" /> 
			<match-rule name="httpsd_prefork" type="binary" filename="^httpsd.prefork$" regexp="Apache/([0-9].[0-9]+.[0-9]+)" /> 
			<match-rule name="httpsd_worker" type="binary" filename="^httpsd.worker$" regexp="Apache/([0-9].[0-9]+.[0-9]+)" /> 						
		</match-rules>
	</project-rule>
	
	<project-rule name="apache" from="wild" os="windows">
		<eval expression="executables" speed="1" confidence="95"/> 
		<eval expression="versionstring" speed="2" confidence="100" />
		<match-rules name="executables">
			<result expression="httpd_exe OR apache_exe" />
			
			<match-rule name="httpd_exe" type="filename" filename="^httpd.exe" />
			<match-rule name="apache_exe" type="filename" filename="^Apache.exe" />  
		</match-rules>
		<match-rules name="versionstring">
			<result expression="httpd_exe OR apache2_exe" />
			<!-- for httpd.exe 2.2.x files, the identifying characteristic is the build string -->
			<match-rule name="httpd_exe" type="binary" filename="^httpd.exe" regexp="build.([0-9]\.[0-9]+\.[0-9]+)" />
			<!-- for Apache.exe 2.0.x files the identifying characteristic is this build string pattern -->
			<!-- for Apache.exe 1.3.x files the identifying characteristic is this build string pattern. it's like apache2 but uses an underscore,
			     so the regex using a build. will match either - or _ and pull both cases of a 1.3.39 and a 2.0.46 .exe for example  -->
			<match-rule name="apache2_exe" type="binary" filename="^Apache.exe" regexp="build.([0-9]\.[0-9]+\.[0-9]+)" />

		</match-rules>
	</project-rule>

	<project-rule name="gcc" from="wild" os="linux,sunos-5.8,sunos-5.9,sunos-5.10,macosx" >

		<eval expression="gccfile" speed="1" confidence="100" />
		<match-rules name="gccfile">
			<match-rule name="gcc" type="filename" filename="^gcc$"  />			
		</match-rules>
		
		<eval expression="version" speed="2" confidence="100" />
		<match-rules name="version">
			<result expression="gccbin3 OR gccbin4" />	
			<match-rule name="gccbin3" type="binary" filename="^gcc$" regexp="(3\.[0-9]\.[0-9]?)"/>	
			<match-rule name="gccbin4" type="binary" filename="^gcc$" regexp="(4\.[0-9]\.[0-9]?)"/>								
		</match-rules>
	</project-rule>
	
	<project-rule name="junit" from="wild" os="all">
		<eval expression="justfilenames" speed="1" confidence='95'/>
		<eval expression="junit_md5" speed="2" confidence='100'/>
		
		<match-rules name="justfilenames">
			<result expression="post4 OR series3 OR ancient" />
			<!-- starting at JUnit 4, the project's jars contained the version number in the jar name -->
			<match-rule name="post4" type="filename" filename="junit-([0-9]\.[0-9])\.jar" />
			<!-- lots of junit 3 versions like this -->
			<match-rule name="series3" type="filename" filename="junit.jar" />
			<!-- some junit jars, back in the 2 days, were junit2.jar -->
			<match-rule name="ancient" type="filename" filename="junit([0-9])\.jar" />
		</match-rules>

		<match-rules name="junit_md5">
			<!-- would be nice to do an OR-ALL as an expression instead of explicitly OR'ing -->
			<result expression="ju2 OR ju3 OR ju3.2 OR ju3.4 OR ju3.5 OR ju3.6 OR ju3.7 OR ju3.8 OR ju3.8.1 OR ju3.8.2 OR ju4.0 OR ju4.1 OR ju4.2 OR ju4.3.1 OR ju4.4" /> 
			<match-rule name="ju2" type="MD5" filename="(.+?).jar" version="2" md5sum="06e503d7e6457e7c3470e65b36a1529f" />
			<match-rule name="ju3" type="MD5" filename="(.+?).jar" version="3" md5sum="6cc8728e66815a4e136ec17fa703c424" />
			<match-rule name="ju3.2" type="MD5" filename="(.+?).jar" version="3.2" md5sum="d5171fc6c7860889b8224b9f822fb891" />
			<match-rule name="ju3.4" type="MD5" filename="(.+?).jar" version="3.4" md5sum="04023ede5a649ec9a61596e046f44ba0" />			
			<match-rule name="ju3.5" type="MD5" filename="(.+?).jar" version="3.5" md5sum="12702a79719214df90e7c468ee0bd6d7" />
			<match-rule name="ju3.6" type="MD5" filename="(.+?).jar" version="3.6" md5sum="c6e6a3c947575b4c5980ab782d7c2a87" />
			<match-rule name="ju3.7" type="MD5" filename="(.+?).jar" version="3.7" md5sum="96079ce2323b1e68431fdfd20efa6e2d" />
			<match-rule name="ju3.8" type="MD5" filename="(.+?).jar" version="3.8" md5sum="8f978abc1bcd0bd48402883d7f7e228a" />
			<match-rule name="ju3.8.1" type="MD5" filename="(.+?).jar" version="3.8.1" md5sum="1f40fb782a4f2cf78f161d32670f7a3a" />
			<match-rule name="ju3.8.2" type="MD5" filename="(.+?).jar" version="3.8.2" md5sum="28e7eb9eeefe31a657c68755bfccc541" />
			<match-rule name="ju4.0" type="MD5" filename="(.+?).jar" version="4.0" md5sum="9bf6686f948a5bb4fbe951d5578e19c3" />
			<match-rule name="ju4.1" type="MD5" filename="(.+?).jar" version="4.1" md5sum="3aa45be8fd3f5ae8c69b73959a7fa57c" />
			<match-rule name="ju4.2" type="MD5" filename="(.+?).jar" version="4.2" md5sum="b5a27973a2c87d161b4c2729b64ecf66" />
			<match-rule name="ju4.3.1" type="MD5" filename="(.+?).jar" version="4.3.1" md5sum="868b4d5d488858c57bc5a04245154da6" />
			<match-rule name="ju4.4" type="MD5" filename="(.+?).jar" version="4.4" md5sum="f852bbb2bbe0471cef8e5b833cb36078" />	
			
			<!-- the rule engine makes an optimization assumption that any md5 match rule types within a match-rules will not have 
			     duplicate md5sums.  this saves it from having to evaluate all md5 match rules after it's found the first match
                 with a given location/filename. 
              -->
		</match-rules>

	</project-rule>

	<project-rule name="openssl" from="wild" os="all" >
		<eval expression="filematch" speed="1" confidence="100" />
		<eval expression="version" speed="2" confidence="100" />
		
		<match-rules name="filematch">
			<match-rule name="libfile" type="filename" filename="^libssl.so\.(.+?)$" />
		</match-rules>
		
		<match-rules name="version">
			<result expression="exe OR bin OR lib091 OR lib092 OR lib093 OR lib094 OR lib095 OR lib096 OR lib097 OR lib098 OR lib3" />

			<match-rule name="exe" type="binary" filename="^openssl.exe" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]) "/>
			<match-rule name="bin" type="binary" filename="^openssl$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]) "/>
			<!-- these are separate match rules instead of the filename regex of ^libssl.so.(.+?)$ because many of these versions can end 
			up in the same directory and the match-rule is defined to only use the first match of a filename in the same directory...
			otherwise it asks the filename be made more explicit -->
			<match-rule name="lib091" type="binary" filename="^libssl.so.0.9.1$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib092" type="binary" filename="^libssl.so.0.9.2$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib093" type="binary" filename="^libssl.so.0.9.3$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib094" type="binary" filename="^libssl.so.0.9.4$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib095" type="binary" filename="^libssl.so.0.9.5$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib096" type="binary" filename="^libssl.so.0.9.6$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib097" type="binary" filename="^libssl.so.0.9.7$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib098" type="binary" filename="^libssl.so.0.9.8$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />
			<match-rule name="lib3" type="binary" filename="^libssl[0-9].so$" regexp="OpenSSL ([0-9]\.[0-9]+\.[0-9][a-z]?) " />			
		</match-rules>
	</project-rule>
	
	<project-rule name="openssh" from="wild" os="linux,sunos-5.8,sunos-5.9,sunos-5.10" >
		<eval expression="sshfile" speed="1" confidence="100" />		
		<eval expression="version" speed="2" confidence="100" />

		<match-rules name="sshfile">
			<match-rule name="sshbin" type="filename" filename="^ssh$"/>			
		</match-rules>
				
		<match-rules name="version">
			<match-rule name="sshbin" type="binary" filename="^ssh$" regexp="OpenSSH_([0-9]\.[0-9][a-z]?[0-9]?)" />			
		</match-rules>
	</project-rule>	
		
	<project-rule name="php" from="wild" os="all">
		<eval expression="(executables-php4 OR executables-php5)" speed="1" confidence="100" />
		<eval expression="versionstring" speed="2" confidence="100" />
				
		<match-rules name="executables-php5">
			<result expression="php5lib OR phpdll" />
			<match-rule name="php5lib" type="filename" filename="^libphp5.so$" />
			<match-rule name="phpdll" type="filename" filename="^php5.dll" />			
		</match-rules>
		<match-rules name="executables-php4">
			<result expression="php4lib OR phpdll" />			
			<match-rule name="php4lib" type="filename" filename="^libphp4.so$" />
			<match-rule name="phpdll" type="filename" filename="^php4.dll" />			
		</match-rules>
		
		<match-rules name="versionstring">
			<result expression="libversion OR binversion OR modversion OR exeversion OR dllthreadedversion OR dllversion" />
			<match-rule name="libversion" type="binary" filename="^libphp(.?).so$" regexp="PHP/([0-9].[0-9]+.[0-9]+)" />
			<match-rule name="binversion" type="binary" filename="^php$" regexp="PHP/([0-9].[0-9]+.[0-9]+)" />
			<match-rule name="exeversion" type="binary" filename="^php.exe$" regexp="PHP/([0-9].[0-9]+.[0-9]+)" />
			<match-rule name="modversion" type="binary" filename="^mod_php(.?).so$" regexp="PHP/([0-9].[0-9]+.[0-9]+)" />
			<match-rule name="dllthreadedversion" type="binary" filename="^php[4-5]ts.dll$" regexp="PHP/([0-9].[0-9]+.[0-9]+)" />
			<match-rule name="dllversion" type="binary" filename="^php[4-5].dll$" regexp="PHP/([0-9].[0-9]+.[0-9]+)" />			
		</match-rules>
	</project-rule>	

	<!-- here's an example of identifying what version of linux we scanned 
	
		If we wanted to see what it was by manually looking at it, it would be:
		
		lcox@smoker:~> cat /proc/version
		Linux version 2.6.16.21-0.8-smp (geeko@buildhost) (gcc version 4.1.0 (SUSE Linux)) #1 SMP Mon Jul 3 18:25:39 UTC 2006
		
		There are certain system files like this, found in only one place, that we would want to specify an absolute path to.  This
		is one of the few examples I can think of that's like this.  You don't want to pick up just any file named "version"
		for this match and rule application, but only the /proc/version file.  We need to think about how to best handle
		this case without making the match-ruless for everything else much more complicated (requiring paths - I want to stay
		away from requiring any paths in most cases).
		
		I am suggesting a "<constraint>" tag which says "constrain this rule to only files of 'filename' found within the 
		constraint path" - in this example, just files named version found in the path constrained by /proc
		
	-->
	<!-- until we're ready to implement this, comment out the idea
	<project-rule name="linux" from="wild" os="linux">
		<eval expression="versionstring" speed="1" confidence="100" />
		<match-rules name="versionstring">
			<match-rule name="version" type="binary" filename="^version" regexp="*" />
			<constraint>/proc</constraint>
		</match-rules>
	</project-rule>
	-->

</project-rules>
