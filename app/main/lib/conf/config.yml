# config.yml
#
# LEGAL NOTICE
# -------------
#
# OSS Discovery is a tool that finds installed open source software.
#    Copyright (C) 2007-2009 OpenLogic, Inc.
#
# OSS Discovery is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License version 3 as
# published by the Free Software Foundation.
#
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License version 3 (discovery2-client/license/OSSDiscoveryLicense.txt)
# for more details.
#
# You should have received a copy of the GNU Affero General Public License along with this program.
# If not, see http://www.gnu.org/licenses/
#
# You can learn more about OSSDiscovery or contact the team at www.ossdiscovery.com.
# You can contact OpenLogic at info@openlogic.com.
#
#--------------------------------------------------------------------------------------------------
#
# The properties defined in this file, can, for the most part, be organized into some kind of
# topical group.  'General' is the catch-all group for properties that don't really lend themselves
# to being organized any better than that.  The 'General' group appears first, and after that all
# of the remaining properties are organized alphabetically by their group.  This 'group' has no
# bearing whatsoever on how the properties get used, it just serves as a way to keep the list of
# properties in this file in some sane, organized manner.


################################################################################
# General properties

#--------------------------------------------------------------------------------------
# what directory to walk if no other directories are specified in the inclusion filter
# if --path command line parameter is given, that path will override this one
# if no --path is given and there are no filters in the inclusion_filter list, then
# this path will be used to scan

# The default directory to scan is whatever the path is up to the first \ or / in the
# current working directory.  This results in / for unix-based environments and c:\
# for windows (or whatever drive discovery is running from)
#directory_to_scan: <% ENV['OSSDISCOVERY_HOME'].match(/^.*?[\\\/]/)[0] %>

#--------------------------------------------------------------------------------------
# which default filter set to use
generic_filters: /filters/filters-list.rb

#--------------------------------------------------------------------------------------
# show permission denied directories or files
show_permission_denied: false

#--------------------------------------------------------------------------------------
# decide whether to scan symlink'd files and directories
# by default it's true because symlinks are so commonly used
follow_symlinks: true

# maximum number of indirections to follow through symlinks
symlink_depth: 5

#--------------------------------------------------------------------------------------
# Set to 'all' to run all rules.
# Set to 'fast' to run just the fast name-based rules.
# Set to 'slow' to run just the handwritten rules.
rule_types: fast


#--------------------------------------------------------------------------------------
# Open archives (e.g., zip files) to scan their contents?
# NOTE: nested archive files will also be examined, along with their nested archives, etc.
open_archives: true

#--------------------------------------------------------------------------------------
# Set to true to not look inside archives if we already match against the archive
# file itself.  For example, if the archive is hibernate3.zip, we may not need
# to open it.
dont_open_discovered_archives: true

#--------------------------------------------------------------------------------------
# Where archives are temporarily unpacked for scanning
# NOTE: set to 'nil' (without quotes) to use the operating system default temp dir
#archive_temp_dir: /my/special/temp/dir
archive_temp_dir: nil

#--------------------------------------------------------------------------------------
# Which file extensions signify an archive to open if the open_archives flag is set?
# NOTE:  these must currently be files stored in the 'zip' format only.
archive_extensions: <% [ '.zip', '.war', '.ear' ] %>

#--------------------------------------------------------------------------------------
# Set to true to force discovery to look inside of a jar file for known class
# files even if the jar file itself is recognized.
always_open_class_file_archives: false

#--------------------------------------------------------------------------------------
# Set to true to avoid looking inside of a jar file for known class files if the
# jar file itself is not recognized.
no_class_files: false

#--------------------------------------------------------------------------------------
# Which file extensions signify an archive that could contain .class files to
# examine if the archive is not recognized and no_class_files is false.
# NOTE:  these must currently be files stored in the 'zip' format only.
class_file_archive_extensions: <% [ '.jar', '.war', '.ear' ] %>

#--------------------------------------------------------------------------------------
# Set to true to look in source files to find traces of open source usage.
examine_source_files: false

#--------------------------------------------------------------------------------------
# Which file extensions signify a source code file.
# NOTE: currently only Java-style languages are supported.  Java .class files
# can be in this list because the discovery technique used can look inside them
# similar to how it looks inside a .java or .groovy file.
source_file_extensions: <% [ '.java', '.groovy', '.class' ] %>


#--------------------------------------------------------------------------------------
# Set to true to look inside windows binary files to find traces of open source usage.
examine_windows_binary_files: false

#--------------------------------------------------------------------------------------
# Which file extensions signify a windows binary file.
windows_binary_file_extensions: <% [ '.exe', '.dll' ] %>

#--------------------------------------------------------------------------------------
# When a scan is performed on a production machine, the person performing the scan does
# not want the scanner to take all system resources. Below are the parameters that will
# throttle the max amount of system resources that the scanner will consume.
#
# Every x number of files, pause for y number of seconds.
throttle_number_of_files: 300
throttle_seconds_to_pause: 2.5
# The defaults are 300 and 2 respectively. Here's how these defaults were arrived at.
# A sample scan on my machine ran in 15 minutes, and showed 451499 total files encountered.
# The above defaults add just over an hour of wait time which is roughly 4x the original
# throttling-disabled run time; a few of us decided 4x sounded good enough for a default on irc.
################################################################################


################################################################################
# Logging properties
# Arg that will be passed to Logger.new().  From the rdoc: This is a filename (String) or IO object (typically STDOUT, STDERR, or an open file).
#log_device: <% File.expand_path( File.join( ENV['OSSDISCOVERY_HOME'], 'log', 'discovery.log')) %>

# Valid options are: FATAL, ERROR, WARN, INFO, DEBUG - 'WARN' is the recommended setting for
# productions runs, it shouldn't give you too much output, but you also won't miss importatnt warnings.
#log_level: <% Logger::INFO %>
################################################################################


################################################################################
# Debugging/Developer-oriented properties
#
# Set this property to true if you'd like an auditable list of all the files of interested that triggered successful
# matches to be printed out.  If it is set to true, the human readable results files will contain data that will be
# useful for a rule writer in terms of auditing all the key files that were matched against during the discovery run.
produce_match_audit_records: false
################################################################################

################################################################################
# Rules update configuration
#
# since OSSDiscovery will not be configurable to work on rule sets provided by various plugins
# this is a global setting regardless of what plugins are installed.  If you are maintaining your
# own rule set separate from the census rulesets, change these values to match your configuration
server_base_url: https://www.osscensus.org/service  # osscensus official
rules_files_url_path: rules_files.xml
rules_file_base_url: https://www.osscensus.org
update_rules: false
update_rules_and_do_scan: false
# When you navigate in a browser to 'server_base_url + rules_files_url_path' (eg... http://localhost:3000/rules_files.xml),
# you should see an xml file that specifies all the scan rules files available on the server.
################################################################################


################################################################################
#Output properties
#--------------------------------------------------------------------------------------
# where the results should go by default, both of these may be overridden by command
# line options.

# whether or not to show the machine scan results after the scan is complete
preview_results: false

# default to not send, can be overridden on command line. see: --deliver-results
send_results: false

# used for audit output of rules engine
results: STDOUT

# all other output properties such as results filename defaults are kept in the lib/plugins/*/conf/*.yml files
# on a per plugin basis
################################################################################

################################################################################
# Rules properties

# where to pick up the default scan rules
#  TODO - change "openlogic" to "census" to make this more generic
#rules_openlogic: <% File.expand_path(File.join( ENV['OSSDISCOVERY_HOME'], 'lib','rules', 'openlogic')) %>
#rules_drop_ins: <% File.expand_path(File.join( ENV['OSSDISCOVERY_HOME'], 'lib','rules', 'drop_ins')) %>

rules_dirs: <% ['rules_openlogic', 'rules_drop_ins'] %>

# If you only want to run the tool with your custom written rules, you would put them in the 'drop_ins' dir and change the previous line to:
#   rules_dirs: <% ['rules_drop_ins'] %>
################################################################################

# end of config


